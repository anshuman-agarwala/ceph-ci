# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..proto import gateway_pb2 as gateway__pb2


class GatewayStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_bdev = channel.unary_unary(
                '/Gateway/create_bdev',
                request_serializer=gateway__pb2.create_bdev_req.SerializeToString,
                response_deserializer=gateway__pb2.bdev.FromString,
                )
        self.resize_bdev = channel.unary_unary(
                '/Gateway/resize_bdev',
                request_serializer=gateway__pb2.resize_bdev_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.delete_bdev = channel.unary_unary(
                '/Gateway/delete_bdev',
                request_serializer=gateway__pb2.delete_bdev_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.create_subsystem = channel.unary_unary(
                '/Gateway/create_subsystem',
                request_serializer=gateway__pb2.create_subsystem_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.delete_subsystem = channel.unary_unary(
                '/Gateway/delete_subsystem',
                request_serializer=gateway__pb2.delete_subsystem_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.add_namespace = channel.unary_unary(
                '/Gateway/add_namespace',
                request_serializer=gateway__pb2.add_namespace_req.SerializeToString,
                response_deserializer=gateway__pb2.nsid_status.FromString,
                )
        self.remove_namespace = channel.unary_unary(
                '/Gateway/remove_namespace',
                request_serializer=gateway__pb2.remove_namespace_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.add_host = channel.unary_unary(
                '/Gateway/add_host',
                request_serializer=gateway__pb2.add_host_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.remove_host = channel.unary_unary(
                '/Gateway/remove_host',
                request_serializer=gateway__pb2.remove_host_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.create_listener = channel.unary_unary(
                '/Gateway/create_listener',
                request_serializer=gateway__pb2.create_listener_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.delete_listener = channel.unary_unary(
                '/Gateway/delete_listener',
                request_serializer=gateway__pb2.delete_listener_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.get_subsystems = channel.unary_unary(
                '/Gateway/get_subsystems',
                request_serializer=gateway__pb2.get_subsystems_req.SerializeToString,
                response_deserializer=gateway__pb2.subsystems_info.FromString,
                )
        self.get_spdk_nvmf_log_flags_and_level = channel.unary_unary(
                '/Gateway/get_spdk_nvmf_log_flags_and_level',
                request_serializer=gateway__pb2.get_spdk_nvmf_log_flags_and_level_req.SerializeToString,
                response_deserializer=gateway__pb2.spdk_nvmf_log_flags_and_level_info.FromString,
                )
        self.disable_spdk_nvmf_logs = channel.unary_unary(
                '/Gateway/disable_spdk_nvmf_logs',
                request_serializer=gateway__pb2.disable_spdk_nvmf_logs_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.set_spdk_nvmf_logs = channel.unary_unary(
                '/Gateway/set_spdk_nvmf_logs',
                request_serializer=gateway__pb2.set_spdk_nvmf_logs_req.SerializeToString,
                response_deserializer=gateway__pb2.req_status.FromString,
                )
        self.get_gateway_info = channel.unary_unary(
                '/Gateway/get_gateway_info',
                request_serializer=gateway__pb2.get_gateway_info_req.SerializeToString,
                response_deserializer=gateway__pb2.gateway_info.FromString,
                )


class GatewayServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_bdev(self, request, context):
        """Creates a bdev from an RBD image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resize_bdev(self, request, context):
        """Resizes a bdev
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_bdev(self, request, context):
        """Deletes a bdev
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_subsystem(self, request, context):
        """Creates a subsystem
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_subsystem(self, request, context):
        """Deletes a subsystem
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_namespace(self, request, context):
        """Adds a namespace to a subsystem
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_namespace(self, request, context):
        """Removes a namespace from a subsystem
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_host(self, request, context):
        """Adds a host to a subsystem
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_host(self, request, context):
        """Removes a host from a subsystem
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_listener(self, request, context):
        """Creates a listener for a subsystem at a given IP/Port
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_listener(self, request, context):
        """Deletes a listener from a subsystem at a given IP/Port
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_subsystems(self, request, context):
        """Gets subsystems
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_spdk_nvmf_log_flags_and_level(self, request, context):
        """Gets spdk nvmf log flags and level
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disable_spdk_nvmf_logs(self, request, context):
        """Disables spdk nvmf logs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_spdk_nvmf_logs(self, request, context):
        """Set spdk nvmf logs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_gateway_info(self, request, context):
        """Set spdk nvmf logs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_bdev': grpc.unary_unary_rpc_method_handler(
                    servicer.create_bdev,
                    request_deserializer=gateway__pb2.create_bdev_req.FromString,
                    response_serializer=gateway__pb2.bdev.SerializeToString,
            ),
            'resize_bdev': grpc.unary_unary_rpc_method_handler(
                    servicer.resize_bdev,
                    request_deserializer=gateway__pb2.resize_bdev_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'delete_bdev': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_bdev,
                    request_deserializer=gateway__pb2.delete_bdev_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'create_subsystem': grpc.unary_unary_rpc_method_handler(
                    servicer.create_subsystem,
                    request_deserializer=gateway__pb2.create_subsystem_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'delete_subsystem': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_subsystem,
                    request_deserializer=gateway__pb2.delete_subsystem_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'add_namespace': grpc.unary_unary_rpc_method_handler(
                    servicer.add_namespace,
                    request_deserializer=gateway__pb2.add_namespace_req.FromString,
                    response_serializer=gateway__pb2.nsid_status.SerializeToString,
            ),
            'remove_namespace': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_namespace,
                    request_deserializer=gateway__pb2.remove_namespace_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'add_host': grpc.unary_unary_rpc_method_handler(
                    servicer.add_host,
                    request_deserializer=gateway__pb2.add_host_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'remove_host': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_host,
                    request_deserializer=gateway__pb2.remove_host_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'create_listener': grpc.unary_unary_rpc_method_handler(
                    servicer.create_listener,
                    request_deserializer=gateway__pb2.create_listener_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'delete_listener': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_listener,
                    request_deserializer=gateway__pb2.delete_listener_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'get_subsystems': grpc.unary_unary_rpc_method_handler(
                    servicer.get_subsystems,
                    request_deserializer=gateway__pb2.get_subsystems_req.FromString,
                    response_serializer=gateway__pb2.subsystems_info.SerializeToString,
            ),
            'get_spdk_nvmf_log_flags_and_level': grpc.unary_unary_rpc_method_handler(
                    servicer.get_spdk_nvmf_log_flags_and_level,
                    request_deserializer=gateway__pb2.get_spdk_nvmf_log_flags_and_level_req.FromString,
                    response_serializer=gateway__pb2.spdk_nvmf_log_flags_and_level_info.SerializeToString,
            ),
            'disable_spdk_nvmf_logs': grpc.unary_unary_rpc_method_handler(
                    servicer.disable_spdk_nvmf_logs,
                    request_deserializer=gateway__pb2.disable_spdk_nvmf_logs_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'set_spdk_nvmf_logs': grpc.unary_unary_rpc_method_handler(
                    servicer.set_spdk_nvmf_logs,
                    request_deserializer=gateway__pb2.set_spdk_nvmf_logs_req.FromString,
                    response_serializer=gateway__pb2.req_status.SerializeToString,
            ),
            'get_gateway_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_gateway_info,
                    request_deserializer=gateway__pb2.get_gateway_info_req.FromString,
                    response_serializer=gateway__pb2.gateway_info.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Gateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Gateway(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_bdev(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/create_bdev',
            gateway__pb2.create_bdev_req.SerializeToString,
            gateway__pb2.bdev.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resize_bdev(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/resize_bdev',
            gateway__pb2.resize_bdev_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_bdev(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/delete_bdev',
            gateway__pb2.delete_bdev_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_subsystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/create_subsystem',
            gateway__pb2.create_subsystem_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_subsystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/delete_subsystem',
            gateway__pb2.delete_subsystem_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_namespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/add_namespace',
            gateway__pb2.add_namespace_req.SerializeToString,
            gateway__pb2.nsid_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_namespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/remove_namespace',
            gateway__pb2.remove_namespace_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_host(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/add_host',
            gateway__pb2.add_host_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_host(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/remove_host',
            gateway__pb2.remove_host_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_listener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/create_listener',
            gateway__pb2.create_listener_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_listener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/delete_listener',
            gateway__pb2.delete_listener_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_subsystems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/get_subsystems',
            gateway__pb2.get_subsystems_req.SerializeToString,
            gateway__pb2.subsystems_info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_spdk_nvmf_log_flags_and_level(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/get_spdk_nvmf_log_flags_and_level',
            gateway__pb2.get_spdk_nvmf_log_flags_and_level_req.SerializeToString,
            gateway__pb2.spdk_nvmf_log_flags_and_level_info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disable_spdk_nvmf_logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/disable_spdk_nvmf_logs',
            gateway__pb2.disable_spdk_nvmf_logs_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_spdk_nvmf_logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/set_spdk_nvmf_logs',
            gateway__pb2.set_spdk_nvmf_logs_req.SerializeToString,
            gateway__pb2.req_status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_gateway_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Gateway/get_gateway_info',
            gateway__pb2.get_gateway_info_req.SerializeToString,
            gateway__pb2.gateway_info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
